{"version":3,"sources":["components/Header.jsx","HelperMethods/HelperMethods.js","components/SortingVisualizer.jsx","serviceWorker.js","index.js","components/App.jsx"],"names":["Header","props","className","style","backgroundColor","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","bubbleSort","selectionSort","randomize","HelperMethods","disableButtons","buttons","document","querySelectorAll","disabled","enableButtons","turnAllOtherBarsBlue","indexToKeepRed","arrayToUpdate","i","length","current","getElementById","removeAllHighlightedBars","randomNumberBetweenBounds","Math","floor","random","fillArrayWithRandomValues","tempArray","push","SortingVisualizer","arrayCache","animations","useState","array","updateArray","highlightRedBar","indexToTurnRed","shift","tempArr","slice","len","j","tmp","setTimeout","animatedBubbleSort","min","animatedSelectionSort","map","value","idx","height","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67769afa.chunk.js","sourcesContent":["/* eslint-disable */\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport $ from \"jquery\";\r\nimport Popper from \"popper.js\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nexport function Header(props) {\r\n    return (\r\n        <nav\r\n            className=\"navbar navbar-light navbar-expand-lg \"\r\n            style={{ backgroundColor: \"#e3f2fd\" }}\r\n        >\r\n            <a className=\"navbar-brand\">Sorting Algo Visualizer</a>\r\n            <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item active\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-success\"\r\n                            onClick={props.bubbleSort}\r\n                        >\r\n                            Bubble Sort\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            onClick={props.selectionSort}\r\n                        >\r\n                            Selection Sort\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <button type=\"button\" className=\"btn btn-warning\">\r\n                            Insertion Sort\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <button type=\"button\" className=\"btn btn-danger\">\r\n                            Merge Sort\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={props.randomize}\r\n                        >\r\n                            Randomize\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n","const LOWER_BOUND = 5;\r\nconst UPPER_BOUND = 100;\r\nconst ARRAY_SIZE = 100;\r\n\r\nconst HelperMethods = {\r\n    disableButtons: () => {\r\n        let buttons = document.querySelectorAll(\"button\");\r\n        for (let button of buttons) {\r\n            button.disabled = true;\r\n        }\r\n    },\r\n\r\n    enableButtons: () => {\r\n        let buttons = document.querySelectorAll(\"button\");\r\n        for (let button of buttons) {\r\n            button.disabled = false;\r\n        }\r\n    },\r\n\r\n    turnAllOtherBarsBlue: (indexToKeepRed, arrayToUpdate) => {\r\n        for (let i = 0; i < arrayToUpdate.length; i++) {\r\n            let current = document.getElementById(`${i}`);\r\n            if (i !== indexToKeepRed) {\r\n                current.style.backgroundColor = \"#b9cced\";\r\n            }\r\n        }\r\n    },\r\n\r\n    removeAllHighlightedBars: () => {\r\n        for (let i = 0; i < ARRAY_SIZE; i++) {\r\n            document.getElementById(`${i}`).style.backgroundColor = \"#b9cced\";\r\n        }\r\n    },\r\n\r\n    // returns a random number between bounds inclusive\r\n    randomNumberBetweenBounds: () => {\r\n        return Math.floor(Math.random() * UPPER_BOUND) + LOWER_BOUND;\r\n    },\r\n\r\n    // fills array with random values\r\n    fillArrayWithRandomValues: () => {\r\n        let tempArray = [];\r\n        for (let i = 0; i < ARRAY_SIZE; i++) {\r\n            tempArray.push(HelperMethods.randomNumberBetweenBounds());\r\n        }\r\n        return tempArray;\r\n    }\r\n};\r\n\r\nexport default HelperMethods;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport { Header } from \"./Header\";\r\nimport HelperMethods from \"../HelperMethods/HelperMethods\";\r\n\r\nexport default function SortingVisualizer(props) {\r\n    let arrayCache = [];\r\n    let animations = [];\r\n    const [array, updateArray] = useState(\r\n        HelperMethods.fillArrayWithRandomValues\r\n    );\r\n\r\n    function highlightRedBar() {\r\n        let indexToTurnRed = animations.shift();\r\n        let highlightedBar = document.getElementById(`${indexToTurnRed}`);\r\n        highlightedBar.style.backgroundColor = \"red\";\r\n        let arrayToUpdate = arrayCache.shift();\r\n        HelperMethods.turnAllOtherBarsBlue(indexToTurnRed, arrayToUpdate);\r\n        if (arrayCache.length === 0) {\r\n            HelperMethods.removeAllHighlightedBars();\r\n            HelperMethods.enableButtons();\r\n        }\r\n        updateArray(arrayToUpdate);\r\n    }\r\n\r\n    function animatedSelectionSort() {\r\n        let mult = 1;\r\n        let tempArr = array.slice();\r\n        let len = tempArr.length;\r\n        for (let i = 0; i < len; i++) {\r\n            let min = i;\r\n            for (var j = i + 1; j < len; j++) {\r\n                animations.push(j);\r\n                if (tempArr[min] > tempArr[j]) {\r\n                    min = j;\r\n                }\r\n            }\r\n            if (min !== i) {\r\n                let tmp = tempArr[i];\r\n                tempArr[i] = tempArr[min];\r\n                tempArr[min] = tmp;\r\n                arrayCache.push(tempArr.slice());\r\n                setTimeout(() => {\r\n                    highlightRedBar();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function animatedBubbleSort() {\r\n        let tempArr = array.slice();\r\n        let len = tempArr.length;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len; j++) {\r\n                animations.push(j);\r\n                if (tempArr[j] > tempArr[j + 1]) {\r\n                    let tmp = tempArr[j];\r\n                    tempArr[j] = tempArr[j + 1];\r\n                    tempArr[j + 1] = tmp;\r\n                    arrayCache.push(tempArr.slice());\r\n\r\n                    /*\r\n                    Note on possibly enhancing performance, maybe we can just swap \r\n                    elements in the DOM and update the state at the end in timeouts.\r\n                    \r\n                    Maybe after that I can increase the array size to 200 ? \r\n\r\n                    what is the point of updating the entire state every time when in reality only two bars will be different\r\n                    from before? \r\n\r\n\r\n                    CONCERNS: re-rendering the DOM is what applies the ley id values based on the idexes, if we don't re-render the ids will be out of order highlist the wrong \r\n                    bars\r\n                    */\r\n                    setTimeout(() => {\r\n                        highlightRedBar();\r\n                    }, i * 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                bubbleSort={() => {\r\n                    animatedBubbleSort();\r\n                    HelperMethods.disableButtons();\r\n                }}\r\n                randomize={() => {\r\n                    updateArray(HelperMethods.fillArrayWithRandomValues);\r\n                }}\r\n                selectionSort={() => {\r\n                    animatedSelectionSort();\r\n                    HelperMethods.disableButtons();\r\n                }}\r\n            />\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => {\r\n                    return (\r\n                        <div\r\n                            style={{ height: `${value * 2}px` }}\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            id={idx}\r\n                        ></div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","/* eslint-disable */\r\nimport React, { useState } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport SortingVisualizer from \"./SortingVisualizer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <SortingVisualizer />\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}